#BlueJ class context
comment0.target=GameManager
comment1.params=
comment1.target=GameManager()
comment1.text=\r\n\ Initializing\ GameManager.\r\n
comment10.params=
comment10.target=void\ startTimer()
comment10.text=\r\n\ Start\ the\ timer.\r\n
comment11.params=
comment11.target=void\ stopTimer()
comment11.text=\r\n\ Stop\ the\ timer.\r\n
comment12.params=
comment12.target=void\ act()
comment12.text=\r\n\ Used\ for\ board\ fill\r\n
comment13.params=
comment13.target=void\ addQuestionToBoard()
comment13.text=\r\n\ Add\ every\ single\ question\ to\ the\ game\ board\r\n
comment14.params=
comment14.target=void\ makeBoard()
comment14.text=\r\n\ Make\ the\ game\ board.\r\n
comment15.params=
comment15.target=void\ startGame()
comment16.params=
comment16.target=void\ startRound()
comment17.params=c
comment17.target=void\ actionPerformed(GUIComponent)
comment17.text=\r\n\ Respond\ to\ a\ button\ being\ clicked\ by\ choosing\ a\ question\ to\ display.\r\n\r\n\ @param\ c\ The\ button\ object\ that\ was\ clicked.\r\n
comment18.params=questionNum
comment18.target=void\ showQuestion(int)
comment18.text=\r\n\ Show\ the\ specified\ question.\r\n\r\n\ @param\ questionNum\ The\ question\ number\ to\ show.\r\n
comment19.params=correct
comment19.target=void\ answerResponse(boolean)
comment19.text=\r\n\ Records\ an\ answer\ and\ advances.\r\n\r\n\ @param\ correct\ Set\ <code>true</code>\ if\ the\ answer\ was\ right;\ other\ set\r\n\ <code>false</code>.\r\n
comment2.params=b
comment2.target=void\ setProvideChoices(boolean)
comment2.text=\r\n\ Set\ whether\ to\ provide\ choices\ for\ questions.\r\n\r\n\ @param\ b\ Set\ <code>true</code>\ to\ provide\ choices;\ otherwise\ set\ to\r\n\ \ \ \ \ \ \ \ <code>false</code>.\r\n
comment20.params=
comment20.target=void\ selfResponse()
comment20.text=\r\n\ Advances\ to\ the\ response\ screen\ when\ user\ is\ deciding\ if\ the\ answer\r\n\ is\ right\ or\ wrong.\r\n
comment21.params=correct
comment21.target=void\ answerSelf(boolean)
comment21.text=\r\n\ Records\ the\ user\ evaluation\ of\ an\ answer\ and\ advances.\r\n\r\n\ @param\ correct\ Set\ <code>true</code>\ if\ the\ answer\ was\ right;\ other\ set\r\n\ <code>false</code>.\r\n
comment22.params=
comment22.target=void\ timeout()
comment22.text=\r\n\ Responds\ to\ a\ timeout\ and\ advances.\r\n
comment23.params=
comment23.target=void\ endQuestion()
comment23.text=\r\n\ End\ the\ question\ and\ decide\ the\ next\ step.\r\n
comment24.params=
comment24.target=void\ startFinalRound()
comment24.text=\r\n\ Method\ startFinalRound\r\n
comment25.params=bet
comment25.target=void\ finalRound(int)
comment25.text=\r\n\ Start\ the\ final\ round.\r\n\r\n\ @param\ bet\ The\ amount\ of\ the\ bet.\r\n
comment26.params=
comment26.target=void\ gameOver()
comment26.text=\r\n\ Display\ the\ game\ over.\r\n
comment27.params=str\ max
comment27.target=java.lang.String[]\ wordWrap(java.lang.String,\ int)
comment27.text=\r\n\ Wraps\ a\ single\ string\ into\ an\ array\ of\ strings\ for\ some\ maximum\r\n\ number\ of\ characters.\ Also\ will\ split\ lines\ on\ newlines\ or\ the\r\n\ characters\ "\\n"\ allowing\ simple\ manually-placed\ newlines.\r\n\r\n\ Changed\ the\ regex,\ dded\ max,\ added\ newline\ split,\ removed\ extra\r\n\ blank\ line\ at\ end.\r\n\r\n\ @see\ http\://joust.kano.net/weblog/archives/000060.html\r\n
comment28.params=filename
comment28.target=void\ loadRound(java.lang.String)
comment29.params=filename
comment29.target=java.util.ArrayList\ loadFile(java.lang.String)
comment3.params=
comment3.target=boolean\ getProvideChoices()
comment3.text=\r\n\ Return\ whether\ choices\ are\ provided\ or\ not.\r\n\r\n\ @return\ <code>true</code>\ if\ choices\ are\ provided;\ otherwise\r\n\ \ \ \ \ \ \ \ \ <code>false</code>.\r\n
comment30.params=lines
comment30.target=void\ convertUnicode(java.util.ArrayList)
comment31.params=
comment31.target=void\ createMethodCategories()
comment32.params=lines
comment32.target=void\ readCategories(java.util.ArrayList)
comment33.params=lines
comment33.target=void\ readQuestions(java.util.ArrayList)
comment34.params=lines
comment34.target=void\ readAnswers(java.util.ArrayList)
comment35.params=lines
comment35.target=void\ readAnswerOrder(java.util.ArrayList)
comment36.params=lines
comment36.target=void\ readExplanations(java.util.ArrayList)
comment4.params=b
comment4.target=void\ setProvideTimer(boolean)
comment4.text=\r\n\ Set\ whether\ to\ provide\ a\ timer\ or\ not.\r\n\r\n\ @param\ b\ Set\ <code>true</code>\ to\ provide\ a\ timer;\ otherwise\ set\ to\r\n\ \ \ \ \ \ \ \ <code>false</code>.\r\n
comment5.params=
comment5.target=boolean\ getProvideTimer()
comment5.text=\r\n\ Return\ whether\ a\ timer\ is\ provided\ or\ not.\r\n\r\n\ @return\ <code>true</code>\ if\ a\ timer\ is\ provided;\ otherwise\r\n\ \ \ \ \ \ \ \ \ <code>false</code>.\r\n
comment6.params=
comment6.target=int\ getScore()
comment6.text=\r\n\ Returns\ the\ current\ score.\r\n\r\n\ @return\ The\ current\ score.\r\n
comment7.params=
comment7.target=Question\ getCurrentQuestion()
comment7.text=\r\n\ Returns\ the\ current\ question.\r\n\r\n\ @return\ The\ current\ question.\r\n
comment8.params=msg
comment8.target=void\ printErrorMessage(java.lang.String)
comment8.text=\r\n\ Print\ an\ error\ message.\r\n\r\n\ @param\ msg\ The\ error\ message.\r\n
comment9.params=
comment9.target=void\ clearErrorMessage()
comment9.text=\r\n\ Clear\ the\ error\ message.\r\n
numComments=37
